name: Build Tauri Frontend

on:
  workflow_dispatch:
    inputs:
      build_windows:
        description: 'Build for Windows'
        required: false
        default: true
        type: boolean
      build_linux:
        description: 'Build for Linux'
        required: false
        default: false
        type: boolean
  release:
    types: [published]

jobs:
  build:
    if: |
      (github.event_name != 'workflow_dispatch') ||
      (github.event.inputs.build_windows == 'true' && matrix.os == 'windows-latest') ||
      (github.event.inputs.build_linux == 'true' && matrix.os == 'ubuntu-latest')
    name: Build frontend on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust build
        uses: actions/cache@v4
        with:
          path: |
            client/src-tauri/target
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-build-${{ runner.os }}-${{ hashFiles('client/src-tauri/Cargo.lock') }}

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: client/.bun
          key: bun-${{ runner.os }}-${{ hashFiles('client/bun.lock') }}

      - name: Install Linux build dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libwebkit2gtk-4.1-dev \
            patchelf

      - name: Install Windows build dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y nsis
        shell: powershell

      - name: Install frontend dependencies
        working-directory: client
        run: bun install --frozen-lockfile

      - name: Build Tauri app
        working-directory: client
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_CLIENT_ID: ${{ secrets.VITE_CLIENT_ID }}
          # Add more env vars as needed
        run: bunx --bun tauri build

      - name: Upload bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-bundle-${{ matrix.os }}
          path: client/src-tauri/target/release/bundle
          if-no-files-found: error
