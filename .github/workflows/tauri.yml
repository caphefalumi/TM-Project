name: Build Tauri Frontend

on:
  workflow_dispatch:
    inputs:
      build_windows:
        description: 'Build for Windows'
        required: false
        default: true
        type: boolean
      build_linux:
        description: 'Build for Linux'
        required: false
        default: false
        type: boolean
      build_macos:
        description: 'Build for macOS'
        required: false
        default: false
        type: boolean
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean
  release:
    types: [published]

jobs:
  build_windows:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.build_windows == 'true'
    runs-on: windows-latest
    name: Build Tauri app (Windows)

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust build
        uses: actions/cache@v4
        with:
          path: |
            client/src-tauri/target
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-build-windows-${{ hashFiles('client/src-tauri/Cargo.lock') }}

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun
          key: bun-windows-${{ hashFiles('client/bun.lock') }}

      - name: Install frontend dependencies
        working-directory: client
        run: bun install --frozen-lockfile

      - name: Build Tauri app (Windows)
        working-directory: client
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_CLIENT_ID: ${{ secrets.VITE_CLIENT_ID }}
          VITE_DESKTOP_CLIENT_ID: ${{ secrets.VITE_DESKTOP_CLIENT_ID }}
          VITE_DESKTOP_CLIENT_SECRET: ${{ secrets.VITE_DESKTOP_CLIENT_SECRET }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PASSWORD }}
        run: bunx --bun tauri build

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: client/src-tauri/target/release/bundle/nsis/*.exe
          if-no-files-found: error

      - name: Upload Windows signature
        uses: actions/upload-artifact@v4
        with:
          name: windows-signature
          path: client/src-tauri/target/release/bundle/nsis/*.sig
          if-no-files-found: error

      - name: Generate Tauri update JSON
        shell: bash
        run: |
          VERSION=$(jq -r '.version' client/src-tauri/tauri.conf.json)
          PUB_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          NOTES="Release of Teams Management v$VERSION"
          WIN_SIG=$(cat client/src-tauri/target/release/bundle/nsis/*.sig 2>/dev/null || echo "")
          WIN_URL="https://github.com/caphefalumi/TM-Project/releases/download/v${VERSION}/TeamsManagementSetup.exe"
          LINUX_SIG=$(cat client/src-tauri/target/release/bundle/appimage/*.sig 2>/dev/null || echo "")
          LINUX_URL="https://github.com/caphefalumi/TM-Project/releases/download/v${VERSION}/TeamsManagement.AppImage"
          MAC_SIG=$(cat client/src-tauri/target/release/bundle/dmg/*.sig 2>/dev/null || echo "")
          MAC_URL="https://github.com/caphefalumi/TM-Project/releases/download/v${VERSION}/TeamsManagement.dmg"
          if [[ -n "$WIN_SIG" ]]; then
            jq -n --arg version "$VERSION" --arg notes "$NOTES" --arg pub_date "$PUB_DATE" --arg win_sig "$WIN_SIG" --arg win_url "$WIN_URL" '{version: $version, notes: $notes, pub_date: $pub_date, platforms: {"windows-x86_64": {signature: $win_sig, url: $win_url}}}' > latest.json
          elif [[ -n "$LINUX_SIG" ]]; then
            jq -n --arg version "$VERSION" --arg notes "$NOTES" --arg pub_date "$PUB_DATE" --arg linux_sig "$LINUX_SIG" --arg linux_url "$LINUX_URL" '{version: $version, notes: $notes, pub_date: $pub_date, platforms: {"linux-x86_64": {signature: $linux_sig, url: $linux_url}}}' > latest.json
          elif [[ -n "$MAC_SIG" ]]; then
            jq -n --arg version "$VERSION" --arg notes "$NOTES" --arg pub_date "$PUB_DATE" --arg mac_sig "$MAC_SIG" --arg mac_url "$MAC_URL" '{version: $version, notes: $notes, pub_date: $pub_date, platforms: {"darwin-x86_64": {signature: $mac_sig, url: $mac_url}}}' > latest.json
          else
            echo "No .sig file found for this platform." && exit 1
          fi

      - name: Upload update JSON
        uses: actions/upload-artifact@v4
        with:
          name: tauri-update-json
          path: latest.json
          if-no-files-found: error

  build_linux:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.build_linux == 'true'
    runs-on: ubuntu-latest
    name: Build Tauri app (Linux)

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust build
        uses: actions/cache@v4
        with:
          path: |
            client/src-tauri/target
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-build-linux-${{ hashFiles('client/src-tauri/Cargo.lock') }}

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun
          key: bun-linux-${{ hashFiles('client/bun.lock') }}

      - name: Install Linux build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libwebkit2gtk-4.1-dev \
            patchelf
      - name: Install frontend dependencies
        working-directory: client
        run: bun install --frozen-lockfile

      - name: Build Tauri app (Linux)
        working-directory: client
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_CLIENT_ID: ${{ secrets.VITE_CLIENT_ID }}
          VITE_DESKTOP_CLIENT_ID: ${{ secrets.VITE_DESKTOP_CLIENT_ID }}
          VITE_DESKTOP_CLIENT_SECRET: ${{ secrets.VITE_DESKTOP_CLIENT_SECRET }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PASSWORD }}
        run: bunx --bun tauri build

      - name: Upload Linux AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: client/src-tauri/target/release/bundle/appimage/*.AppImage
          if-no-files-found: error

      - name: Upload Linux signature
        uses: actions/upload-artifact@v4
        with:
          name: linux-signature
          path: client/src-tauri/target/release/bundle/appimage/*.sig
          if-no-files-found: error

      - name: Upload Linux DEB package
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: client/src-tauri/target/release/bundle/deb/*.deb
          if-no-files-found: ignore

      - name: Upload Linux RPM package
        uses: actions/upload-artifact@v4
        with:
          name: linux-rpm
          path: client/src-tauri/target/release/bundle/rpm/*.rpm
          if-no-files-found: ignore

      # - name: Generate Tauri update JSON
      #   shell: bash
      #   run: |
      #     VERSION=$(jq -r '.version' client/src-tauri/tauri.conf.json)
      #     PUB_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      #     NOTES="Release of Teams Management v$VERSION"
      #     WIN_SIG=$(cat client/src-tauri/target/release/bundle/nsis/*.sig 2>/dev/null || echo "")
      #     WIN_URL="https://github.com/caphefalumi/TM-Project/releases/download/v${VERSION}/TeamsManagementSetup.exe"
      #     LINUX_SIG=$(cat client/src-tauri/target/release/bundle/appimage/*.sig 2>/dev/null || echo "")
      #     LINUX_URL="https://github.com/caphefalumi/TM-Project/releases/download/v${VERSION}/TeamsManagement.AppImage"
      #     MAC_SIG=$(cat client/src-tauri/target/release/bundle/dmg/*.sig 2>/dev/null || echo "")
      #     MAC_URL="https://github.com/caphefalumi/TM-Project/releases/download/v${VERSION}/TeamsManagement.dmg"
      #     if [[ -n "$WIN_SIG" ]]; then
      #       jq -n --arg version "$VERSION" --arg notes "$NOTES" --arg pub_date "$PUB_DATE" --arg win_sig "$WIN_SIG" --arg win_url "$WIN_URL" '{version: $version, notes: $notes, pub_date: $pub_date, platforms: {"windows-x86_64": {signature: $win_sig, url: $win_url}}}' > latest.json
      #     elif [[ -n "$LINUX_SIG" ]]; then
      #       jq -n --arg version "$VERSION" --arg notes "$NOTES" --arg pub_date "$PUB_DATE" --arg linux_sig "$LINUX_SIG" --arg linux_url "$LINUX_URL" '{version: $version, notes: $notes, pub_date: $pub_date, platforms: {"linux-x86_64": {signature: $linux_sig, url: $linux_url}}}' > latest.json
      #     elif [[ -n "$MAC_SIG" ]]; then
      #       jq -n --arg version "$VERSION" --arg notes "$NOTES" --arg pub_date "$PUB_DATE" --arg mac_sig "$MAC_SIG" --arg mac_url "$MAC_URL" '{version: $version, notes: $notes, pub_date: $pub_date, platforms: {"darwin-x86_64": {signature: $mac_sig, url: $mac_url}}}' > latest.json
      #     else
      #       echo "No .sig file found for this platform." && exit 1
      #     fi

      # - name: Upload update JSON
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: tauri-update-json
      #     path: latest.json
      #     if-no-files-found: error

  build_macos:
    if: |
      github.event_name != 'workflow_dispatch' ||
      github.event.inputs.build_macos == 'true'
    runs-on: macos-latest
    name: Build Tauri app (macOS)

    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust build
        uses: actions/cache@v4
        with:
          path: |
            client/src-tauri/target
            ~/.cargo/registry
            ~/.cargo/git
          key: rust-build-macos-${{ hashFiles('client/src-tauri/Cargo.lock') }}

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun
          key: bun-macos-${{ hashFiles('client/bun.lock') }}

      - name: Install frontend dependencies
        working-directory: client
        run: bun install --frozen-lockfile

      - name: Build Tauri app (macOS)
        working-directory: client
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_CLIENT_ID: ${{ secrets.VITE_CLIENT_ID }}
          VITE_DESKTOP_CLIENT_ID: ${{ secrets.VITE_DESKTOP_CLIENT_ID }}
          VITE_DESKTOP_CLIENT_SECRET: ${{ secrets.VITE_DESKTOP_CLIENT_SECRET }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_PASSWORD }}
        run: bunx --bun tauri build

      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: client/src-tauri/target/release/bundle/dmg/*.dmg
          if-no-files-found: error

      - name: Upload macOS signature
        uses: actions/upload-artifact@v4
        with:
          name: macos-signature
          path: client/src-tauri/target/release/bundle/macos/*.sig
          if-no-files-found: error

      - name: Upload macOS APP bundle
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: client/src-tauri/target/release/bundle/macos/*.app.tar.gz
          if-no-files-found: ignore

      # - name: Generate Tauri update JSON
      #   shell: bash
      #   run: |
      #     VERSION=$(jq -r '.version' client/src-tauri/tauri.conf.json)
      #     PUB_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
      #     NOTES="Release of Teams Management v$VERSION"
      #     WIN_SIG=$(cat client/src-tauri/target/release/bundle/nsis/*.sig 2>/dev/null || echo "")
      #     WIN_URL="https://github.com/caphefalumi/TM-Project/releases/download/v${VERSION}/TeamsManagementSetup.exe"
      #     LINUX_SIG=$(cat client/src-tauri/target/release/bundle/appimage/*.sig 2>/dev/null || echo "")
      #     LINUX_URL="https://github.com/caphefalumi/TM-Project/releases/download/v${VERSION}/TeamsManagement.AppImage"
      #     MAC_SIG=$(cat client/src-tauri/target/release/bundle/dmg/*.sig 2>/dev/null || echo "")
      #     MAC_URL="https://github.com/caphefalumi/TM-Project/releases/download/v${VERSION}/TeamsManagement.dmg"
      #     if [[ -n "$WIN_SIG" ]]; then
      #       jq -n --arg version "$VERSION" --arg notes "$NOTES" --arg pub_date "$PUB_DATE" --arg win_sig "$WIN_SIG" --arg win_url "$WIN_URL" '{version: $version, notes: $notes, pub_date: $pub_date, platforms: {"windows-x86_64": {signature: $win_sig, url: $win_url}}}' > latest.json
      #     elif [[ -n "$LINUX_SIG" ]]; then
      #       jq -n --arg version "$VERSION" --arg notes "$NOTES" --arg pub_date "$PUB_DATE" --arg linux_sig "$LINUX_SIG" --arg linux_url "$LINUX_URL" '{version: $version, notes: $notes, pub_date: $pub_date, platforms: {"linux-x86_64": {signature: $linux_sig, url: $linux_url}}}' > latest.json
      #     elif [[ -n "$MAC_SIG" ]]; then
      #       jq -n --arg version "$VERSION" --arg notes "$NOTES" --arg pub_date "$PUB_DATE" --arg mac_sig "$MAC_SIG" --arg mac_url "$MAC_URL" '{version: $version, notes: $notes, pub_date: $pub_date, platforms: {"darwin-x86_64": {signature: $mac_sig, url: $mac_url}}}' > latest.json
      #     else
      #       echo "No .sig file found for this platform." && exit 1
      #     fi

      # - name: Upload update JSON
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: tauri-update-json
      #     path: latest.json
      #     if-no-files-found: error

  create_release:
    if: github.event.inputs.create_release == 'true'
    needs: 
      - build_windows
      - build_linux
      - build_macos
    runs-on: ubuntu-latest
    name: Create GitHub Release
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tauri.conf.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' client/src-tauri/tauri.conf.json)
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "raw_version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -type f -name "*" | sort
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Windows files
          if [ -d "artifacts/windows-installer" ]; then
            echo "Processing Windows installer..."
            find artifacts/windows-installer -name "*.exe" -exec cp {} release-assets/ \; 2>/dev/null || echo "No Windows exe found"
          fi
          if [ -d "artifacts/windows-signature" ]; then
            echo "Processing Windows signature..."
            find artifacts/windows-signature -name "*.sig" -exec sh -c 'cp "$1" "release-assets/$(basename "$1" .sig)-windows.sig"' _ {} \; 2>/dev/null || echo "No Windows sig found"
          fi
          
          # Linux files
          if [ -d "artifacts/linux-appimage" ]; then
            echo "Processing Linux AppImage..."
            find artifacts/linux-appimage -name "*.AppImage" -exec cp {} release-assets/ \; 2>/dev/null || echo "No Linux AppImage found"
          fi
          if [ -d "artifacts/linux-signature" ]; then
            echo "Processing Linux signature..."
            find artifacts/linux-signature -name "*.sig" -exec sh -c 'cp "$1" "release-assets/$(basename "$1" .sig)-linux.sig"' _ {} \; 2>/dev/null || echo "No Linux sig found"
          fi
          if [ -d "artifacts/linux-deb" ]; then
            echo "Processing Linux DEB..."
            find artifacts/linux-deb -name "*.deb" -exec cp {} release-assets/ \; 2>/dev/null || echo "No Linux deb found"
          fi
          if [ -d "artifacts/linux-rpm" ]; then
            echo "Processing Linux RPM..."
            find artifacts/linux-rpm -name "*.rpm" -exec cp {} release-assets/ \; 2>/dev/null || echo "No Linux rpm found"
          fi
          
          # macOS files
          if [ -d "artifacts/macos-dmg" ]; then
            echo "Processing macOS DMG..."
            find artifacts/macos-dmg -name "*.dmg" -exec cp {} release-assets/ \; 2>/dev/null || echo "No macOS dmg found"
          fi
          if [ -d "artifacts/macos-signature" ]; then
            echo "Processing macOS signature..."
            find artifacts/macos-signature -name "*.sig" -exec sh -c 'cp "$1" "release-assets/$(basename "$1" .sig)-macos.sig"' _ {} \; 2>/dev/null || echo "No macOS sig found"
          fi
          if [ -d "artifacts/macos-app" ]; then
            echo "Processing macOS APP..."
            find artifacts/macos-app -name "*.app" -exec tar -czf release-assets/TeamsManagement-macos.app.tar.gz -C artifacts/macos-app {} \; 2>/dev/null || echo "No macOS app found"
          fi
          
          # Update JSON if it exists
          if [ -d "artifacts/tauri-update-json" ]; then
            echo "Processing update JSON..."
            find artifacts/tauri-update-json -name "*.json" -exec cp {} release-assets/ \; 2>/dev/null || echo "No update JSON found"
          fi
          
          echo "Release assets prepared:"
          ls -la release-assets/ || echo "No release assets found"
          
          # Check if we have any assets
          if [ -z "$(ls -A release-assets/)" ]; then
            echo "ERROR: No release assets found!"
            exit 1
          fi
      
      - name: Generate release notes
        id: generate_notes
        run: |
          VERSION="${{ steps.get_version.outputs.raw_version }}"
          NOTES=$(cat << 'EOF'
          ## Teams Management v$VERSION
          
          ### 🚀 What's New
          - Global notification system with AWS-style overlapping notifications
          - Automatic update checker with user confirmation dialogs
          - Enhanced UI/UX with better visual feedback
          - Improved mobile responsiveness
          
          ### 🐛 Bug Fixes
          - Fixed notification z-index issues with dialogs
          - Improved error handling across the application
          - Performance optimizations for large teams
          
          ### 📦 Installation
          
          **Windows**: Download and run `*.exe` installer
          **Linux**: Download `*.AppImage` and make it executable, or use `*.deb`/`*.rpm` packages
          **macOS**: Download and mount `*.dmg`, then drag to Applications folder
          
          ### 🔐 Security
          All releases are signed and verified. Signature files (`*.sig`) are included for verification.
          
          ---
          
          **Full Changelog**: https://github.com/caphefalumi/TM-Project/compare/v0.1.0...v$VERSION
          EOF
          )
          
          # Replace $VERSION in the notes
          NOTES=$(echo "$NOTES" | sed "s/\$VERSION/$VERSION/g")
          
          # Save to file to handle multiline output
          echo "$NOTES" > release_notes.md
          
          echo "Generated release notes:"
          cat release_notes.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Teams Management ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: release-assets/*
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
